#! /usr/bin/env python

import argparse
import sys
import time
from distutils.util import strtobool

from amalgkit.__init__ import __version__

print('AMALGKIT version: {}'.format(__version__))
print('AMALGKIT command: {}'.format(' '.join(sys.argv)))
print('AMALGKIT bug report: https://github.com/kfuku52/amalgkit/issues')

def command_metadata(args):
    sys.stdout.write('amalgkit metadata: start\n')
    start = time.time()
    from amalgkit.metadata import metadata_main
    metadata_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit metadata: end\n')

def command_getfastq(args):
    sys.stdout.write('amalgkit getfastq: start\n')
    start = time.time()
    from amalgkit.getfastq import getfastq_main
    getfastq_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit getfastq: end\n')

def command_quant(args):
    sys.stdout.write('amalgkit quant: start\n')
    start = time.time()
    from amalgkit.quant import quant_main
    try:
        quant_main(args)
    except ValueError as err:
        print("ERROR: ", err)
        sys.exit(1)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit quant: end\n')

def command_cstmm(args):
    sys.stdout.write('amalgkit cstmm: start\n')
    start = time.time()
    from amalgkit.cstmm import cstmm_main
    cstmm_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit cstmm: end\n')

def command_curate(args):
    sys.stdout.write('amalgkit curate: start\n')
    start = time.time()
    from amalgkit.curate import curate_main
    curate_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit curate: end\n')

def command_merge(args):
    sys.stdout.write('amalgkit merge: start\n')
    start = time.time()
    from amalgkit.merge import merge_main
    merge_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit merge: end\n')

def command_sanity(args):
    sys.stdout.write('amalgkit sanity: start\n')
    start = time.time()
    from amalgkit.sanity import sanity_main
    sanity_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit sanity: end\n')

def command_integrate(args):
    sys.stdout.write('amalgkit integrate: start\n')
    start = time.time()
    from amalgkit.integrate import integrate_main
    integrate_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit integrate: end\n')

def command_csca(args):
    sys.stdout.write('amalgkit csca: start\n')
    start = time.time()
    from amalgkit.csca import csca_main
    csca_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit csca: end\n')

def command_config(args):
    sys.stdout.write('amalgkit config: start\n')
    start = time.time()
    from amalgkit.config import config_main
    config_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit config: end\n')

def command_help(args):
    print(parser.parse_args([args.command, '--help']))


# Main parser
parser = argparse.ArgumentParser(description='A toolkit for cross-species transcriptome amalgamation')
parser.add_argument('--version', action='version', version='amalgkit version ' + __version__)
subparsers = parser.add_subparsers()

# Parent parsers
pp_meta = argparse.ArgumentParser(add_help=False)
pp_meta.add_argument('--metadata', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: "inferred" = out_dir/metadata/metadata/metadata.tsv. '
                      'PATH to metadata table, the output file of `amalgkit metadata`.')
pp_out = argparse.ArgumentParser(add_help=False)
pp_out.add_argument('--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to the directory where intermediate and output files are generated.')
pp_batch = argparse.ArgumentParser(add_help=False)
pp_batch.add_argument('--batch', metavar='INT', default=None, type=int, required=False, action='store',
                 help='default=%(default)s: One-based index of metadata table (--metadata). If set, process only one SRA record. This function is intended for array job processing.')
pp_redo = argparse.ArgumentParser(add_help=False)
pp_redo.add_argument('--redo', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Redo the analysis even if previous output files are detected.')
pp_threads = argparse.ArgumentParser(add_help=False)
pp_threads.add_argument('--threads', metavar='INT', default=1, type=int, required=False, action='store',
                 help='default=%(default)s: Number of threads.')

# Sub parser: metadata
pme_help = 'NCBI SRA metadata retrieval and curation. See `amalgkit metadata -h`'
pme = subparsers.add_parser('metadata', help=pme_help, parents=[pp_out])
pme.add_argument('--config_dir', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to the config directory. "inferred" = out_dir/config')
pme.add_argument('--entrez_email', metavar='aaa@bbb.com', default='', type=str, required=False, action='store',
                 help='default=%(default)s: Your email address. See https://www.ncbi.nlm.nih.gov/books/NBK25497/')
pme.add_argument('--min_nspots', metavar='INT', default=5000000, type=int, required=False, action='store',
                 help='default=%(default)s: Minimum number of RNA-seq reads per sample.')
pme.add_argument('--tissue_detect', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Uses config files for tissue grouping by default. If turned on, uses natural language processing to group tissues automatically.')
pme.add_argument('--max_sample', metavar='INT', default=99999, type=int, required=False, action='store',
                 help='default=%(default)s: Maximum number of RNA-seq data sampled for one tissue in a species.')
pme.add_argument('--overwrite', metavar='no|yes', default='no', type=strtobool,
                 required=False, action='store',
                 help='default=%(default)s: Overwrite existing metadata.tsv and intermediate files.')
pme.set_defaults(handler=command_metadata)

# Sub parser: getfastq
pge_help = 'Retrieving fastq files. See `amalgkit getfastq -h`'
pge = subparsers.add_parser('getfastq', help=pge_help, parents=[pp_out, pp_meta, pp_threads, pp_redo, pp_batch])
pge.add_argument('--entrez_email', metavar='aaa@bbb.com', default='', type=str, required=False, action='store',
                 help='default=%(default)s: Your email address. See https://www.ncbi.nlm.nih.gov/books/NBK25497/')
pge.add_argument('--id', metavar='XXXXX0000', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: BioProject/BioSample/SRR ID.')
pge.add_argument('--id_list', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Location of file containing a list of SRA IDs. Otherwise works like --id')
pge.add_argument('--layout', metavar='single|paired|auto', default='auto', type=str, required=False, action='store',
                 choices=['single', 'paired', 'auto'],
                 help='default=%(default)s: Library layout of RNA-seq data to be dumped. '
                      '"auto" prioritizes paird-end libraries if both types are available.')
pge.add_argument('--max_bp', metavar='INT', default='999,999,999,999,999', type=str, required=False, action='store',
                 help='default=%(default)s: Target sequence size (bp) to be dumped.')
pge.add_argument('--min_read_length', metavar='INT', default=25, type=int, required=False, action='store',
                 help='default=%(default)s: Minimum read length.')
pge.add_argument('--pfd', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Run parallel-fastq-dump.')
pge.add_argument('--pfd_exe', metavar='PATH', default='parallel-fastq-dump', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to parallel-fastq-dump executable.')
pge.add_argument('--prefetch_exe', metavar='PATH', default='prefetch', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to prefetch executable.')
pge.add_argument('--fastp', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Run fastp.')
pge.add_argument('--fastp_exe', metavar='PATH', default='fastp', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to fastp executable.')
pge.add_argument('--fastp_option', metavar='STR', default='-j /dev/null -h /dev/null', type=str, required=False,
                 action='store',
                 help='default=%(default)s: Options to be passed to fastp. Do not include --length_required option here. '
                      'It can be specified throught --min_read_length in amalgkit. ')
pge.add_argument('--remove_sra', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Remove downloaded SRA files after fastq extraction.')
pge.add_argument('--remove_tmp', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Remove temporary files.')
pge.add_argument('--pfd_print', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Show parallel-fastq-dump stdout and stderr.')
pge.add_argument('--fastp_print', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Show fastp stdout and stderr.')
pge.add_argument('--sci_name', metavar='STR', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Species name in case the BioProject covers multiple species. Example: "Homo sapiens"')
pge.add_argument('--ncbi', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Download SRA files using wget from NCBI cloud, if available.')
pge.add_argument('--aws', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Download SRA files from Amazon Cloud (AWS), if available.')
pge.add_argument('--gcp', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Download SRA files from Google Cloud (GCP), if available.')
pge.add_argument('--read_name', metavar='default|trinity', default='default', type=str, required=False, action='store',
                 choices=['default', 'trinity'],
                 help='default=%(default)s: read name formatting for downstream analysis.')
pge.add_argument('--concat', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: concatenate SRA fastq files (e.g, for assembly).')
pge.add_argument('--entrez_additional_search_term', metavar='STR',
                 default=None,
                # default='"platform illumina"[Properties] AND "type rnaseq"[Filter] AND "sra biosample"[Filter]',
                 type=str, required=False, action='store',
                 help='default=%(default)s: Entrez search terms in addition to --id option to further restrict the SRA entry.')
pge.add_argument('--tol', metavar='FLOAT', default=1, type=float, required=False, action='store',
                 help='default=%(default)s: Acceptable percentage loss of reads relative to --max_bp. If the 1st-round sequence '
                      'generation could not produce enough reads, the 2nd-round sequence generation is activated to '
                      'compensate the loss.')
pge.set_defaults(handler=command_getfastq)

# Sub parser: quant
pqu_help = 'Estimating transcript abundance with kallisto. See `amalgkit quant -h`'
pqu = subparsers.add_parser('quant', help=pqu_help, parents=[pp_out, pp_meta, pp_threads, pp_redo, pp_batch])

pqu.add_argument('--index_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to index directory. Only required if index directory is not '
                      'out_dir/index/')
pqu.add_argument('--clean_fastq', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Remove getfastq-processed fastq files when quant is successfully completed.')
pqu.add_argument('--fasta_dir', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: "inferred" = out_dir/fasta. '
                      'PATH to directory containing reference transcriptome fasta files required for kallisto index building (see --build_index). '
                      'In this directory, file names of fasta files are expected to start with the string '
                      'in the "scientific_name" column of the metadata table, with a space replaced with an underbar. '
                      'Example: Arabidopsis_thaliana_v1.fasta for Arabidopsis thaliana.')
pqu.add_argument('--build_index', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Allows AMALGKIT to build kallisto index from reference fasta files. '
                      'Will only do this for a species if an index file is not already present. One fasta file per species should be put in --fasta_dir. '
                      'AMALGKIT will read the species from the metadata, try to find the fasta file (.fa or .fasta) and build the index for further use.')
pqu.set_defaults(handler=command_quant)

# Sub parser: merge
pmg_help = 'Generating transcript abundance tables. See `amalgkit merge -h`'
pmg = subparsers.add_parser('merge', help=pmg_help, parents=[pp_out, pp_meta])
pmg.set_defaults(handler=command_merge)

# Sub parser: cstmm
pcs_help = 'Applying cross-species TMM normalization using single-copy genes. See `amalgkit cstmm -h`'
pcs = subparsers.add_parser('cstmm', help=pcs_help, parents=[pp_out, pp_meta])
pcs.add_argument('--orthogroup_table', metavar='PATH', default='./', type=str, required=True, action='store',
                 help='default=%(default)s: PATH to orthogroup table, which is, for example, Orthogroups.tsv and N0.tsv in OrthoFinder.'
                      'Specify `--orthogroup_table ""` for single-species TMM normalization.')
pcs.add_argument('--dir_count', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: AMALGKIT subfolder PATH to per-species transcript abundance data as produced by `amalgkit merge`. '
                      '"inferred" = out_dir/merge')
pcs.set_defaults(handler=command_cstmm)

# Sub parser: csca
pca_help = 'Generating plots with cross-species correlation analysis. See `amalgkit csca -h`'
pca = subparsers.add_parser('csca', help=pca_help, parents=[pp_out, pp_meta])
pca.add_argument('--dir_uncorrected_curate_group_mean', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--dir_curate_group_mean', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--dir_sra', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--dir_tc', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--file_singlecopy', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: ')
pca.add_argument('--file_orthogroup', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: ')
pca.add_argument('--file_species_tree', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: ')
pca.add_argument('--curate_group', metavar='STR', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: "comma separated list of primary condition or tissue used in curate analysis.'
                      'Example input may look like "root,flower,leaf" or "heat stressed,cold stressed,light stressed".'
                      'Please refer to your amalgkit curate outputs.')
pca.set_defaults(handler=command_csca)

# Sub parser: curate
pcu_help = 'Automatic removal of outlier samples and SVA-based unwanted biases. See `amalgkit curate -h`'
pcu = subparsers.add_parser('curate', help=pcu_help, parents=[pp_out, pp_meta, pp_batch])
pcu.add_argument('--input_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to `amalgkit merge` or `amalgkit cstmm` folder. Assumes `merge` folder if no input is given.')
pcu.add_argument('--dist_method', metavar='STR', default='pearson', type=str, required=False, action='store',
                 help='default=%(default)s: Method for calculating distance.')
pcu.add_argument('--mapping_rate', metavar='FLOAT', default=0.20, type=float, required=False, action='store',
                 help='default=%(default)s: cutoff for mapping rate.')
pcu.add_argument('--correlation_threshold', metavar='FLOAT', default=0.30, type=float, required=False, action='store',
                 help='default=%(default)s: lower cutoff for pearson r during outlier removal.')
pcu.add_argument('--plot_intermediate', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: If yes, calculates and plots SVA correction after each iteration of outlier removal. Drastically increases computing times!')
pcu.add_argument('--one_outlier_per_iter', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: If yes, allows curate to remove only 1 sample per same-tissue or same-bioproject. Increases computing times!')
pcu.add_argument('--curate_group', metavar='STR', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: "comma separated list of values contained in the curate_group metadata column to be included in the analysis. '
                      'Example input may look like "root,flower,leaf" or "heat stressed,cold stressed,light stressed".')
pcu.add_argument('--overwrite_intermediate_metadata', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: If yes, allows curate to overwrite an intermediate metadata file created from previous curate runs within the curate folder.')
pcu.add_argument('--norm', metavar='(logn|log2|lognp1|log2p1|none)-(fpkm|tpm|none)',
                 default='log2p1-fpkm', type=str, required=False, action='store',
                 help='default=%(default)s: Expression level transformation before SVA. '
                      'SVA is best performed with log-transformed values. '
                      'logn: log_n normalization after FPKM/TPM transformation. '
                      'log2: log_2 normalization after FPKM/TPM transformation. '
                      'lognp1: log_n(x+1) normalization after FPKM/TPM transformation. '
                      'log2p1: log_2(x+1) normalization after FPKM/TPM transformation. '
                      'fpkm/tpm/none: FPKM, TPM, or no transformation. '
                      )
pcu.set_defaults(handler=command_curate)

# Sub parser: sanity
psa_help = 'Checking the integrity of AMALGKIT input and output files. See `amalgkit sanity -h`'
psa = subparsers.add_parser('sanity', help=psa_help, parents=[pp_out, pp_meta])
psa.add_argument('--index', required=False, action='store_true',
                 help='set this option if you want to check for availability of index files '
                      'based on species name in metadata file.')
psa.add_argument('--quant', required=False, action='store_true',
                 help='set this option if you want to check for availability quant output files '
                      'based on SRA IDs in metadata file.')
psa.add_argument('--getfastq', required=False, action='store_true',
                 help='set this option if you want to check for availability of getfastq output files '
                      'based on SRA IDs in metadata file.')
psa.add_argument('--all', required=False, action='store_true',
                 help='setting this option runs amalgkit sanity as if --index, --quant, --getfastq were set')
psa.add_argument('--index_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to index directory. Only required if index directory is not '
                      'out_dir/index/')
psa.add_argument('--quant_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to quant directory. Only required if quant directory is not '
                      'out_dir/quant/')
psa.add_argument('--getfastq_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to index directory. Only required if getfastq directory is not '
                      'out_dir/getfastq/')
psa.set_defaults(handler=command_sanity)

# Sub parser: integrate
pin_help = 'Appending local fastq info to a metadata table. See `amalgkit integrate -h`'
pin = subparsers.add_parser('integrate', help=pin_help, parents=[pp_out, pp_meta, pp_threads])
pin.add_argument('--fastq_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to input directory where fastq files are stored.')
pin.add_argument('--getfastq_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to index directory. Only required if getfastq directory is not '
                      'out_dir/getfastq/')
pin.add_argument('--remove_tmp', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Remove temporary files.')
pin.add_argument('--accurate_size', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: ONLY APPLIES TO .gz COMPRESSED FASTQ FILES. If no, runs seqkit only on the first 1000 sequences in the fastq file to get an estimate for information like average read length. '
                      'If yes, runs seqkit on the whole fastq file. More accurate, but comes with much higher runtime.')
pin.set_defaults(handler=command_integrate)

# Sub parser: config
pco_help = 'Creating a series of config files for the metadata search. See `amalgkit config -h`'
pco = subparsers.add_parser('config', help=pco_help, parents=[pp_out])
pco.add_argument('--config', metavar='base|test|plantae|vertebrate', default='base', type=str, required=False, action='store',
                 help='default=%(default)s: Name of config dataset to be exported. Options: '
                      '"base": a minimal set of .config files for the purpose of creating custom config files. '
                      '"base_all": a complete set of near-empty .config files. '
                      '"test": short animal set for testing amalgkit metadtata. '
                      '"vertebrate" preconfigured set of config files for vertebrate animal data.'
                      '"plantae": preconfigured set of config files for plant data.')
pco.add_argument('--overwrite', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: allow to overwrite config files in out_dir/config/config_name/ .')
pco.set_defaults(handler=command_config)

# Sub parser: help
parser_help = subparsers.add_parser('help', help='Printing help messages')
parser_help.set_defaults(handler=command_help)

# Handler
args = parser.parse_args()
if hasattr(args, 'handler'):
    args.handler(args)
else:
    parser.print_help()
