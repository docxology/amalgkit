#! /usr/bin/env python

import argparse
import sys
import time
from distutils.util import strtobool

from amalgkit.__init__ import __version__

def command_metadata(args):
    sys.stdout.write('amalgkit metadata: start\n')
    start = time.time()
    from amalgkit.metadata import metadata_main
    metadata_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit metadata: end\n')


def command_view(args): # TODO: Do we still need this?
    sys.stdout.write('amalgkit view: start\n')
    start = time.time()
    # from amalgkit.view import view_main
    # view_main(args)
    print('Hello world!')
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit view: end\n')


def command_getfastq(args):
    sys.stdout.write('amalgkit getfastq: start\n')
    start = time.time()
    from amalgkit.getfastq import getfastq_main
    getfastq_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit getfastq: end\n')


def command_quant(args):
    sys.stdout.write('amalgkit quant: start\n')
    start = time.time()
    from amalgkit.quant import quant_main
    try:
        quant_main(args)
    except ValueError as err:
        print("ERROR: ", err)
        sys.exit(1)

    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit quant: end\n')


def command_cstmm(args):
    sys.stdout.write('amalgkit cstmm: start\n')
    start = time.time()
    from amalgkit.cstmm import cstmm_main
    cstmm_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit cstmm: end\n')

def command_curate(args):
    sys.stdout.write('amalgkit curate: start\n')
    start = time.time()
    from amalgkit.curate import curate_main
    curate_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit curate: end\n')


def command_merge(args):
    sys.stdout.write('amalgkit merge: start\n')
    start = time.time()
    from amalgkit.merge import merge_main
    merge_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit merge: end\n')

def command_sanity(args):
    sys.stdout.write('amalgkit sanity: start\n')
    start = time.time()
    from amalgkit.sanity import sanity_main
    sanity_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit sanity: end\n')

def command_integrate(args):
    sys.stdout.write('amalgkit integrate: start\n')
    start = time.time()
    from amalgkit.integrate import integrate_main
    integrate_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit integrate: end\n')

def command_csca(args):
    sys.stdout.write('amalgkit csca: start\n')
    start = time.time()
    from amalgkit.csca import csca_main
    csca_main(args)
    print('Time elapsed: {:,} sec'.format(int(time.time() - start)))
    sys.stdout.write('amalgkit csca: end\n')


def command_help(args):
    print(parser.parse_args([args.command, '--help']))


# Main parser
parser = argparse.ArgumentParser(description='A toolkit for transcriptome amalgamation')
parser.add_argument('--version', action='version', version='amalgkit version ' + __version__)
subparsers = parser.add_subparsers()

# Sub parser: metadata
pme = subparsers.add_parser('metadata', help='see `amalgkit metadata -h`')
pme.add_argument('-c', '--config_dir', metavar='PATH', default='./', type=str, required=True, action='store',
                 help='default=%(default)s: Path to the config directory.')
pme.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: Path to the directory where intermediate and output files are generated.')
pme.add_argument('-e', '--entrez_email', metavar='aaa@bbb.com', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: Your email address.')
pme.add_argument('-p', '--publication_date', metavar='YYYY/MM/DD:YYYY/MM/DD', default='1900/01/01:TODAY', type=str,
                 required=False, action='store',
                 help='default=%(default)s: Range of the date that records were made public in Entrez.')
pme.add_argument('-n', '--min_nspots', metavar='INT', default=5000000, type=int, required=False, action='store',
                 help='default=%(default)s: Minimum number of RNA-seq reads per sample.')
pme.add_argument('-a', '--tissue_detect', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Uses config files for tissue grouping by default. If turned on, uses natural language processing to group tissues automatically.')
pme.add_argument('-s', '--max_sample', metavar='INT', default=99999, type=int, required=False, action='store',
                 help='default=%(default)s: Maximum number of RNA-seq data sampled for one tissue in a species.')
pme.add_argument('-o', '--overwrite', metavar='no|yes', default='no', type=str,
                 required=False, action='store', choices=['no', 'yes'],
                 help='default=%(default)s: Overwrite existing intermediate files.')
pme.set_defaults(handler=command_metadata)

# Sub parser: view
pvi = subparsers.add_parser('view', help='see `amalgkit view -h`')
pvi.add_argument('-t', '--taxid', metavar='3400', default=None, type=int, required=True, action='store',
                 help='default=%(default)s: NCBI Taxid (e.g., 3400 for Magnoliales).')
pvi.set_defaults(handler=command_view)

# Sub parser: getfastq
pge = subparsers.add_parser('getfastq', help='see `amalgkit getfastq -h`')
pge.add_argument('-e', '--entrez_email', metavar='aaa@bbb.com', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: Your email address. Necessary for accessing NCBI database.')
pge.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pge.add_argument('--id', metavar='XXXXX0000', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: BioProject/BioSample/SRR ID.')
pge.add_argument('--id_list', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Location of file containing a list of SRA IDs. Otherwise works like --id')
pge.add_argument('--layout', metavar='single|paired|auto', default='auto', type=str, required=False, action='store',
                 choices=['single', 'paired', 'auto'],
                 help='default=%(default)s: Library layout of RNA-seq data to be dumped. '
                      '"auto" prioritizes paird-end libraries if both types are available.')
pge.add_argument('--max_bp', metavar='INT', default='999,999,999,999,999', type=str, required=False, action='store',
                 help='default=%(default)s: Target sequence size (bp) to be dumped.')
pge.add_argument('--threads', metavar='INT', default=1, type=int, required=False, action='store',
                 help='default=%(default)s: Number of threads.')
pge.add_argument('--min_read_length', metavar='INT', default=25, type=int, required=False, action='store',
                 help='default=%(default)s: Minimum read length.')
pge.add_argument('--pfd', metavar='yes|no', default='yes', type=str, required=False, action='store',
                 choices=['yes', 'no'],
                 help='default=%(default)s: Run parallel-fastq-dump.')
pge.add_argument('--pfd_exe', metavar='PATH', default='parallel-fastq-dump', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to parallel-fastq-dump executable.')
pge.add_argument('--prefetch_exe', metavar='PATH', default='prefetch', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to prefetch executable.')
pge.add_argument('--fastp', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Run fastp.')
pge.add_argument('--fastp_exe', metavar='PATH', default='fastp', type=str, required=False, action='store',
                 help='default=%(default)s: PATH to fastp executable.')
pge.add_argument('--fastp_option', metavar='STR', default='-j /dev/null -h /dev/null', type=str, required=False,
                 action='store',
                 help='default=%(default)s: Options to be passed to fastp. Do not include --length_required option here. '
                      'It can be specified throught --min_read_length in amalgkit. ')
pge.add_argument('--remove_sra', metavar='yes|no', default='yes', type=str, required=False, action='store',
                 choices=['yes', 'no'],
                 help='default=%(default)s: Remove downloaded SRA files after fastq extraction.')
pge.add_argument('--remove_tmp', metavar='yes|no', default='yes', type=str, required=False, action='store',
                 choices=['yes', 'no'],
                 help='default=%(default)s: Remove temporary files.')
pge.add_argument('--pfd_print', metavar='yes|no', default='yes', type=str, required=False, action='store',
                 choices=['yes', 'no'],
                 help='default=%(default)s: Show parallel-fastq-dump stdout and stderr.')
pge.add_argument('--fastp_print', metavar='yes|no', default='yes', type=str, required=False, action='store',
                 choices=['yes', 'no'],
                 help='default=%(default)s: Show fastp stdout and stderr.')
pge.add_argument('--sci_name', metavar='STR', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Species name in case the BioProject covers multiple species. Example: "Homo sapiens"')
pge.add_argument('--ncbi', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Download SRA files using wget from NCBI cloud, if available.')
pge.add_argument('--aws', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Download SRA files from Amazon Cloud (AWS), if available.')
pge.add_argument('--gcp', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Download SRA files from Google Cloud (GCP), if available.')
pge.add_argument('--read_name', metavar='default|trinity', default='default', type=str, required=False, action='store',
                 choices=['default', 'trinity'],
                 help='default=%(default)s: read name formatting for downstream analysis.')
pge.add_argument('--concat', metavar='yes|no', default='no', type=str, required=False, action='store', choices=['yes', 'no'],
                 help='default=%(default)s: concatenate SRA fastq files (e.g, for assembly).')
pge.add_argument('--entrez_additional_search_term', metavar='STR',
                 default=None,
                # default='"platform illumina"[Properties] AND "type rnaseq"[Filter] AND "sra biosample"[Filter]',
                 type=str, required=False, action='store',
                 help='default=%(default)s: Entrez search terms in addition to --id option to further restrict the SRA entry.')
pge.add_argument('--tol', metavar='FLOAT', default=1, type=float, required=False, action='store',
                 help='default=%(default)s: Acceptable percentage loss of reads relative to --max_bp. If the 1st-round sequence '
                      'generation could not produce enough reads, the 2nd-round sequence generation is activated to '
                      'compensate the loss.')
pge.add_argument('--metadata', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to metadata table. See `amalgkit metadata -h` for details.')
pge.add_argument('--batch', metavar='INT', default=None, type=int, required=False, action='store',
                 help='default=%(default)s: One-based index of metadata table (--metadata). If set, process only one SRA record. This function is intended for array job processing.')
pge.add_argument('--redo', metavar='yes|no', default='no', type=str, required=False, action='store', choices=['yes', 'no'],
                 help='default=%(default)s: Redo the analysis even if *.amalgkit.fastq.gz is detected.')
pge.set_defaults(handler=command_getfastq)

# Sub parser: quant
pqu = subparsers.add_parser('quant', help='see `amalgkit quant -h`')

pqu.add_argument('--id', metavar='XXXXX0000', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: SRA ID. quant automatically search .fastq or .fastq.gz file(s)')
pqu.add_argument('--index_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to Index directory. Only required if Index directory is not '
                      'out_dir/Index/')
pqu.add_argument('--threads', metavar='INT', default=1, type=int, required=False, action='store',
                 help='default=%(default)s: Number of threads.')
pqu.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pqu.add_argument('--metadata', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: PATH to metadata table. See `amalgkit metadata -h` for details.')
pqu.add_argument('--batch', metavar='INT', default=None, type=int, required=False, action='store',
                 help='default=%(default)s: One-based index of metadata table (--metadata). If set, process only one SRA record. This function is intended for array job processing.')
pqu.add_argument('--clean_fastq', metavar='yes|no', default='yes', type=str, required=False, action='store', choices=['yes', 'no'],
                 help='default=%(default)s: Remove fastq files when quant is successfully completed.')
pqu.add_argument('--redo', metavar='yes|no', default='no', type=str, required=False, action='store', choices=['yes', 'no'],
                 help='default=%(default)s: Redo the analysis even if *_abundance.tsv is detected.')
pqu.set_defaults(handler=command_quant)

# Sub parser: cstmm
pcs = subparsers.add_parser('cstmm', help='see `amalgkit cstmm -h`')
pcs.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pcs.add_argument('--ortho', metavar='PATH', default='./', type=str, required=True, action='store',
                 help='default=%(default)s: Path to "Orthogroups" folder from OrthoFinder output.')
pcs.add_argument('--count', metavar='PATH', default='./', type=str, required=True, action='store',
                 help='default=%(default)s: Folder path to count data as produced by `amalgkit merge`.')
pcs.set_defaults(handler=command_cstmm)

# Sub parser: csca
pca = subparsers.add_parser('csca', help='see `amalgkit cstmm -h`')
pca.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pca.add_argument('--dir_uncorrected_curate_group_mean', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--dir_curate_group_mean', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--dir_sra', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--dir_tc', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: In an unaltered amalgkit curate output, this would be curate/tables/. If left at default "inferred" this value will be set to out_dir/curate/tables/')
pca.add_argument('--file_singlecopy', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: ')
pca.add_argument('--file_orthogroup', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: ')
pca.add_argument('--file_species_tree', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: ')
pca.add_argument('--curate_group', metavar='STR', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: "comma separated list of primary condition or tissue used in curate analysis.'
                      'Example input may look like "root,flower,leaf" or "heat stressed,cold stressed,light stressed".'
                      'Please refer to your amalgkit curate outputs.')

pca.set_defaults(handler=command_csca)

# Sub parser: curate
pcu = subparsers.add_parser('curate', help='see `amalgkit curate -h`')

pcu.add_argument('--batch', metavar='INT', default=None, type=int, required=False, action='store',
                 help='default=%(default)s: If set, need to provide --infile_dir and/or --eff_len_dir. Automatically scans input directories based on Metadata file and sends batch job do cluster (SLURM only, currently)')
pcu.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pcu.add_argument('--updated_metadata_dir', metavar='PATH', default='inferred', type=str, required=False, action='store',
                 help='default=%(default)s: Directory containing metadata.tsv files as put out by amalgkit getfastq.')
pcu.add_argument('--infile', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Name or Path of file to curate.')
pcu.add_argument('--eff_len_file', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Name or Path of file to effective length file. Has to have same format as infile.')
pcu.add_argument('--infile_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Name or Path of file to curate.')
pcu.add_argument('--eff_len_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Name or Path of file to effective length file. Has to have same format as infile.')
pcu.add_argument('--metadata', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: Path to metadata file, obtained by amalgkit metadata command.')
pcu.add_argument('--dist_method', metavar='STR', default='pearson', type=str, required=False, action='store',
                 help='default=%(default)s: Method for calculating distance.')
pcu.add_argument('--mapping_rate', metavar='FLOAT', default=0.20, type=float, required=False, action='store',
                 help='default=%(default)s: cutoff for mapping rate.')
pcu.add_argument('--correlation_threshold', metavar='FLOAT', default=0.30, type=float, required=False, action='store',
                 help='default=%(default)s: lower cutoff for pearson r during outlier removal.')
pcu.add_argument('--plot_intermediate', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: If yes, calculates and plots SVA correction after each iteration of outlier removal. Drastically increases computing times!')
pcu.add_argument('--one_outlier_per_iter', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: If yes, allows curate to remove only 1 sample per same-tissue or same-bioproject. Increases computing times!')
pcu.add_argument('--curate_group', metavar='STR', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: "comma separated list of values contained in the curate_group metadata column to be included in the analysis. '
                      'Example input may look like "root,flower,leaf" or "heat stressed,cold stressed,light stressed".')
pcu.add_argument('--norm', metavar='(logn|log2|lognp1|log2p1|none)-(fpkm|tpm|none)',
                 default='log2p1-fpkm', type=str, required=False, action='store',
                 help='default=%(default)s: Expression level transformation before SVA. '
                      'SVA is best performed with log-transformed values. '
                      'logn: log_n normalization after FPKM/TPM transformation. '
                      'log2: log_2 normalization after FPKM/TPM transformation. '
                      'lognp1: log_n(x+1) normalization after FPKM/TPM transformation. '
                      'log2p1: log_2(x+1) normalization after FPKM/TPM transformation. '
                      'fpkm/tpm/none: FPKM, TPM, or no transformation. '
                      )
pcu.set_defaults(handler=command_curate)

# Sub parser: merge
pmg = subparsers.add_parser('merge', help='see `amalgkit merge -h`')

pmg.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pmg.add_argument('--metadata', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to metadata table. See `amalgkit metadata -h` for details.')
pmg.set_defaults(handler=command_merge)

# Sub parser: sanity
psa = subparsers.add_parser('sanity', help='see `amalgkit sanity -h`')

psa.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
psa.add_argument('--metadata', metavar='PATH', default=None, type=str, required=True, action='store',
                 help='default=%(default)s: PATH to metadata table. See `amalgkit metadata -h` for details.')
psa.add_argument('--index', required=False, action='store_true',
                 help='set this option if you want to check for availability of Index files '
                      'based on species name in metadata file.')
psa.add_argument('--quant', required=False, action='store_true',
                 help='set this option if you want to check for availability quant output files '
                      'based on SRA IDs in metadata file.')
psa.add_argument('--getfastq', required=False, action='store_true',
                 help='set this option if you want to check for availability of getfastq output files '
                      'based on SRA IDs in metadata file.')
psa.add_argument('--all', required=False, action='store_true',
                 help='setting this option runs amalgkit sanity as if --index, --quant, --getfastq were set')
psa.add_argument('--index_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to Index directory. Only required if Index directory is not '
                      'out_dir/Index/')
psa.add_argument('--quant_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to quant directory. Only required if quant directory is not '
                      'out_dir/quant/')
psa.add_argument('--getfastq_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to Index directory. Only required if getfastq directory is not '
                      'out_dir/getfastq/')
psa.add_argument('--updated_metadata_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to updated metadata directory. Only required if updated metadata'
                      ' directory is not out_directory/metadata/updated_metadata/')
psa.set_defaults(handler=command_sanity)

# Sub parser: integrate
pin = subparsers.add_parser('integrate', help='see `amalgkit proc -h`')

pin.add_argument('-w','--out_dir', metavar='PATH', default='./', type=str, required=False, action='store',
                 help='default=%(default)s: output directory.')
pin.add_argument('--metadata', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: PATH to metadata table. See `amalgkit metadata -h` for details.')
pin.add_argument('--fastq_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to fastq directory.')
pin.add_argument('--threads', metavar='INT', default=1, type=int, required=False, action='store',
                 help='default=%(default)s: Number of threads.')
pin.add_argument('--getfastq_dir', metavar='PATH', default=None, type=str, required=False, action='store',
                 help='default=%(default)s: custom path to Index directory. Only required if getfastq directory is not '
                      'out_dir/getfastq/')
pin.add_argument('--remove_tmp', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                 help='default=%(default)s: Remove temporary files.')

pin.set_defaults(handler=command_integrate)


# Sub parser: help
parser_help = subparsers.add_parser('help', help='see `help -h`')
parser_help.add_argument('command', help='command name which help is shown')
parser_help.set_defaults(handler=command_help)

# Handler
args = parser.parse_args()
if hasattr(args, 'handler'):
    args.handler(args)
else:
    parser.print_help()
